using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Policy;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Resources;
using System.Windows.Shapes;
using WPF_Lab_4_5.classes;

namespace WPF_Lab_4_5
{
    /// <summary>
    /// Логика взаимодействия для Manage.xaml
    /// </summary>
    public partial class Manage : Window
    {
        public Company company;
        public Container containerUndo;
        public Container containerRedo;
        ResourceDictionary lang;
        

        public Manage()
        {
            InitializeComponent();
            StreamResourceInfo sri = Application.GetResourceStream(new Uri("./files/green_normal.cur", UriKind.Relative));
            Cursor customCursor = new Cursor(sri.Stream);
            this.Cursor = customCursor;
            company = Serialize.DataDeserialize();
            Tours.ItemsSource = company.tourList;
            Tours.AutoGeneratedColumns += dg_AutoGeneratedColumns;
            containerUndo = new Container();
            containerRedo = new Container();
            lang = new ResourceDictionary();
        }

        void dg_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Tours.Columns[0].Header = FindResource("name");
            Tours.Columns[1].Header = FindResource("price");
            Tours.Columns[2].Header = FindResource("country");
            Tours.Columns[3].Header = FindResource("time");
            Tours.Columns[4].Header = FindResource("type");
            Tours.Columns[5].Header = FindResource("rating");
            Tours.Columns[6].Header = FindResource("image");
            Tours.Columns[7].Header = FindResource("description");
        }

        private void button_backToMain_Click(object sender, RoutedEventArgs e)
        {
            Serialize.DataSerialize(company);
            MainWindow main = new MainWindow();
            main.Show();
            this.Close();
        }

        private void button_addTourManage_Click(object sender, RoutedEventArgs e)
        {
            containerRedo.Clear();
            containerUndo.Push(company);
            Add add = new Add();
            add.Owner = this;
            if (add.ShowDialog() != true)
            {
                company = Serialize.DataDeserialize();
                Tours.ItemsSource = null;
                Tours.ItemsSource = company.tourList;
            }
        }

        private void button_edit_Click(object sender, RoutedEventArgs e)
        {
            var selectedTour = (Tour)Tours.SelectedItem;
            if (selectedTour != null)
            {
                containerRedo.Clear();
                containerUndo.Push(company);

                Tour editedTour = new Tour(selectedTour);
                Edit edit = new Edit(editedTour);
                edit.Owner = this;
                if (edit.ShowDialog() != true && edit.edited)
                {
                    Company newComp = new Company();
                    foreach (Tour tour in company.tourList)
                    {
                        if (tour == (Tour)Tours.SelectedItem)
                            newComp.Add(edit.tour);
                        else
                            newComp.Add(tour);
                    }
                    company = newComp;
                    Serialize.DataSerialize(company);
                    Tours.ItemsSource = null;
                    Tours.ItemsSource = company.tourList;
                }
            }
        }

        private void button_deleteTour_Click(object sender, RoutedEventArgs e)
        {
            if (Tours.SelectedItem != null)
            {
                containerRedo.Clear();
                containerUndo.Push(company);
                company.tourList.Remove((Tour)Tours.SelectedItem);
                Serialize.DataSerialize(company);
                Tours.ItemsSource = null;
                Tours.ItemsSource = company.tourList;
            }
        }

        private void filterChange(object sender, RoutedEventArgs e)
        {
            if (cb_filterTour.SelectedIndex == 0)
            {
                tb_Price.Visibility = Visibility.Visible;
                tb_Price.Visibility = Visibility.Visible;
                tb_filterType.Visibility = Visibility.Collapsed;
            }
            else if (cb_filterTour.SelectedIndex == 1)
            {
                tb_Price.Visibility = Visibility.Collapsed;
                tb_Price.Visibility = Visibility.Collapsed;
                tb_filterType.Visibility = Visibility.Visible;
            }
        }

        private void button_filter_Click(object sender, RoutedEventArgs e)
        {
            var sortedList = new Company();
            if (cb_filterTour.SelectedIndex == 0)
            {

                int minPrice, maxPrice;
                int.TryParse(tb_Price.tb_fst.Text, out minPrice);
                int.TryParse(tb_Price.tb_snd.Text, out maxPrice);
                maxPrice = maxPrice == 0 ? int.MaxValue : maxPrice;

                if (minPrice < 0 || maxPrice < 0)
                    throw new Exception();
                else if (maxPrice < minPrice)
                    throw new Exception();
                else if (minPrice > 99999)
                {
                    minPrice = 99999;
                    tb_Price.tb_fst.Text = "99999";
                }
                else if (maxPrice > 99999)
                {
                    maxPrice = 99999;
                    tb_Price.tb_snd.Text = "99999";
                }
               
                foreach (Tour tour in company.tourList)
                {
                    if (tour.Price >= minPrice &&
                        tour.Price <= maxPrice)
                    {
                        sortedList.Add(tour);
                    }
                }

                Tours.ItemsSource = sortedList.tourList;
            }
            else if (cb_filterTour.SelectedIndex == 1)
            {
                foreach (Tour tour in company.tourList)
                {
                    if (tour.Type == tb_filterType.Text)
                    {
                        sortedList.Add(tour);
                    }
                }

                Tours.ItemsSource = sortedList.tourList;
            }
        }

        private void button_search_Click(object sender, RoutedEventArgs e)
        {
            var searchedItems = new Company();
            foreach (var tour in company.tourList)
            {
                string pattern = @"^" + ue_Search.tb_search.Text + @"\w*";
                if (tour.Name == ue_Search.tb_search.Text)
                    searchedItems.Add(tour);
                else if (Regex.IsMatch(tour.Name, pattern))
                    searchedItems.Add(tour);
            }

            Tours.ItemsSource = searchedItems.tourList;
        }

        private void buttonUndo_Click(object sender, RoutedEventArgs e)
        {
            if (containerUndo.Count() != 0)
            {             
                containerRedo.Push(company);
                company = containerUndo.Pop();
                Tours.ItemsSource = null;
                Tours.ItemsSource = company.tourList;
            }
        }
        
        private void buttonRedo_Click(object sender, RoutedEventArgs e)
        {
            if (containerRedo.Count() != 0)
            {
                containerUndo.Push(company);
                company = containerRedo.Pop();              
                Tours.ItemsSource = null;
                Tours.ItemsSource = company.tourList;
            }
        }

        private void escButton_Click(object sender, RoutedEventArgs e)
        {
            Serialize.DataSerialize(company);
            Close();
        }
    }
}
